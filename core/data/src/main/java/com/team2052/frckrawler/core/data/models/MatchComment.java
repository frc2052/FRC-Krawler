package com.team2052.frckrawler.core.data.models;

import org.greenrobot.greendao.annotation.*;

import com.team2052.frckrawler.core.data.models.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "MATCH_COMMENT".
 */
@Entity(active = true)
public class MatchComment implements java.io.Serializable {

    @Id
    private Long id;
    private Long match_number;
    private Integer match_type;
    private Long team_id;
    private String comment;
    private java.util.Date last_updated;

    /**
     * Used to resolve relations
     */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient MatchCommentDao myDao;

    @ToOne(joinProperty = "team_id")
    private Team team;

    @Generated
    private transient Long team__resolvedKey;

    @Generated
    public MatchComment() {
    }

    public MatchComment(Long id) {
        this.id = id;
    }

    @Generated
    public MatchComment(Long id, Long match_number, Integer match_type, Long team_id, String comment, java.util.Date last_updated) {
        this.id = id;
        this.match_number = match_number;
        this.match_type = match_type;
        this.team_id = team_id;
        this.comment = comment;
        this.last_updated = last_updated;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMatchCommentDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getMatch_number() {
        return match_number;
    }

    public void setMatch_number(Long match_number) {
        this.match_number = match_number;
    }

    public Integer getMatch_type() {
        return match_type;
    }

    public void setMatch_type(Integer match_type) {
        this.match_type = match_type;
    }

    public Long getTeam_id() {
        return team_id;
    }

    public void setTeam_id(Long team_id) {
        this.team_id = team_id;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public java.util.Date getLast_updated() {
        return last_updated;
    }

    public void setLast_updated(java.util.Date last_updated) {
        this.last_updated = last_updated;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Team getTeam() {
        Long __key = this.team_id;
        if (team__resolvedKey == null || !team__resolvedKey.equals(__key)) {
            __throwIfDetached();
            TeamDao targetDao = daoSession.getTeamDao();
            Team teamNew = targetDao.load(__key);
            synchronized (this) {
                team = teamNew;
                team__resolvedKey = __key;
            }
        }
        return team;
    }

    @Generated
    public void setTeam(Team team) {
        synchronized (this) {
            this.team = team;
            team_id = team == null ? null : team.getNumber();
            team__resolvedKey = team_id;
        }
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
