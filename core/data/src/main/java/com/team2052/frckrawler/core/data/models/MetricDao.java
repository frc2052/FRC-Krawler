package com.team2052.frckrawler.core.data.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "METRIC".
 */
public class MetricDao extends AbstractDao<Metric, Long> {

    public static final String TABLENAME = "METRIC";

    /**
     * Properties of entity Metric.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Category = new Property(2, Integer.class, "category", false, "CATEGORY");
        public final static Property Type = new Property(3, Integer.class, "type", false, "TYPE");
        public final static Property Data = new Property(4, String.class, "data", false, "DATA");
        public final static Property Enabled = new Property(5, boolean.class, "enabled", false, "ENABLED");
        public final static Property Priority = new Property(6, int.class, "priority", false, "PRIORITY");
    }

    private DaoSession daoSession;


    public MetricDao(DaoConfig config) {
        super(config);
    }

    public MetricDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"METRIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CATEGORY\" INTEGER," + // 2: category
                "\"TYPE\" INTEGER," + // 3: type
                "\"DATA\" TEXT," + // 4: data
                "\"ENABLED\" INTEGER NOT NULL ," + // 5: enabled
                "\"PRIORITY\" INTEGER NOT NULL );"); // 6: priority
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"METRIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Metric entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        Integer category = entity.getCategory();
        if (category != null) {
            stmt.bindLong(3, category);
        }

        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(4, type);
        }

        String data = entity.getData();
        if (data != null) {
            stmt.bindString(5, data);
        }
        stmt.bindLong(6, entity.getEnabled() ? 1L : 0L);
        stmt.bindLong(7, entity.getPriority());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Metric entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        Integer category = entity.getCategory();
        if (category != null) {
            stmt.bindLong(3, category);
        }

        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(4, type);
        }

        String data = entity.getData();
        if (data != null) {
            stmt.bindString(5, data);
        }
        stmt.bindLong(6, entity.getEnabled() ? 1L : 0L);
        stmt.bindLong(7, entity.getPriority());
    }

    @Override
    protected final void attachEntity(Metric entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Metric readEntity(Cursor cursor, int offset) {
        Metric entity = new Metric( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // category
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // type
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // data
                cursor.getShort(offset + 5) != 0, // enabled
                cursor.getInt(offset + 6) // priority
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Metric entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategory(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setData(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEnabled(cursor.getShort(offset + 5) != 0);
        entity.setPriority(cursor.getInt(offset + 6));
    }

    @Override
    protected final Long updateKeyAfterInsert(Metric entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Metric entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Metric entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
