package com.team2052.frckrawler.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "EVENT".
 */
public class EventDao extends AbstractDao<Event, Long> {

    public static final String TABLENAME = "EVENT";
    private DaoSession daoSession;

    public EventDao(DaoConfig config) {
        super(config);
    }


    public EventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FMSID\" TEXT UNIQUE ," + // 1: fmsid
                "\"NAME\" TEXT," + // 2: name
                "\"DATA\" TEXT," + // 3: data
                "\"DATE\" INTEGER," + // 4: date
                "\"UNIQUE_HASH\" TEXT);"); // 5: unique_hash
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Event entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String fmsid = entity.getFmsid();
        if (fmsid != null) {
            stmt.bindString(2, fmsid);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }

        String data = entity.getData();
        if (data != null) {
            stmt.bindString(4, data);
        }

        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }

        String unique_hash = entity.getUnique_hash();
        if (unique_hash != null) {
            stmt.bindString(6, unique_hash);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Event entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String fmsid = entity.getFmsid();
        if (fmsid != null) {
            stmt.bindString(2, fmsid);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }

        String data = entity.getData();
        if (data != null) {
            stmt.bindString(4, data);
        }

        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }

        String unique_hash = entity.getUnique_hash();
        if (unique_hash != null) {
            stmt.bindString(6, unique_hash);
        }
    }

    @Override
    protected final void attachEntity(Event entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Event readEntity(Cursor cursor, int offset) {
        Event entity = new Event( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fmsid
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // data
                cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // date
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // unique_hash
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Event entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFmsid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setData(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setUnique_hash(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
    }
     
    @Override
    protected final Long updateKeyAfterInsert(Event entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Event entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }
    
    @Override
    public boolean hasKey(Event entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Event.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Fmsid = new Property(1, String.class, "fmsid", false, "FMSID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Data = new Property(3, String.class, "data", false, "DATA");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
        public final static Property Unique_hash = new Property(5, String.class, "unique_hash", false, "UNIQUE_HASH");
    }
    
}
