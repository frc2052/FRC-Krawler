package com.team2052.frckrawler.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SERVER_LOG_ENTRY".
 */
public class ServerLogEntryDao extends AbstractDao<ServerLogEntry, Void> {

    public static final String TABLENAME = "SERVER_LOG_ENTRY";

    public ServerLogEntryDao(DaoConfig config) {
        super(config);
    }


    public ServerLogEntryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERVER_LOG_ENTRY\" (" + //
                "\"TIME\" INTEGER," + // 0: time
                "\"MESSAGE\" TEXT);"); // 1: message
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERVER_LOG_ENTRY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ServerLogEntry entity) {
        stmt.clearBindings();

        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(1, time.getTime());
        }

        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(2, message);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ServerLogEntry entity) {
        stmt.clearBindings();

        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(1, time.getTime());
        }

        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(2, message);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    @Override
    public ServerLogEntry readEntity(Cursor cursor, int offset) {
        ServerLogEntry entity = new ServerLogEntry( //
                cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)), // time
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // message
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, ServerLogEntry entity, int offset) {
        entity.setTime(cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)));
        entity.setMessage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
    }

    @Override
    protected final Void updateKeyAfterInsert(ServerLogEntry entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    @Override
    public Void getKey(ServerLogEntry entity) {
        return null;
    }

    @Override
    public boolean hasKey(ServerLogEntry entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity ServerLogEntry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Time = new Property(0, java.util.Date.class, "time", false, "TIME");
        public final static Property Message = new Property(1, String.class, "message", false, "MESSAGE");
    }

}
