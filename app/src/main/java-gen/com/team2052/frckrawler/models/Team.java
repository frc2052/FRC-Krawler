package com.team2052.frckrawler.models;

import org.greenrobot.greendao.annotation.*;

import java.util.List;

import com.team2052.frckrawler.models.DaoSession;

import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "TEAM".
 */
@Entity(active = true)
public class Team implements java.io.Serializable {

    @Id
    @Unique
    private Long number;

    @Unique
    private String teamkey;
    private String name;
    private String data;

    /**
     * Used to resolve relations
     */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient TeamDao myDao;

    @ToMany(joinProperties = {
            @JoinProperty(name = "number", referencedName = "team_id")
    })
    private List<Robot> robotList;

    @Generated
    public Team() {
    }

    public Team(Long number) {
        this.number = number;
    }

    @Generated
    public Team(Long number, String teamkey, String name, String data) {
        this.number = number;
        this.teamkey = teamkey;
        this.name = name;
        this.data = data;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTeamDao() : null;
    }

    public Long getNumber() {
        return number;
    }

    public void setNumber(Long number) {
        this.number = number;
    }

    public String getTeamkey() {
        return teamkey;
    }

    public void setTeamkey(String teamkey) {
        this.teamkey = teamkey;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getData() {
        return data;
    }

    public void setData(String data) {
        this.data = data;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Robot> getRobotList() {
        if (robotList == null) {
            __throwIfDetached();
            RobotDao targetDao = daoSession.getRobotDao();
            List<Robot> robotListNew = targetDao._queryTeam_RobotList(number);
            synchronized (this) {
                if (robotList == null) {
                    robotList = robotListNew;
                }
            }
        }
        return robotList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetRobotList() {
        robotList = null;
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
