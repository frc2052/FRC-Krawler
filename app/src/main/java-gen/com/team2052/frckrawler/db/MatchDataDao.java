package com.team2052.frckrawler.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table MATCH_DATA.
 */
public class MatchDataDao extends AbstractDao<MatchData, Long> {

    public static final String TABLENAME = "MATCH_DATA";
    private Query<MatchData> match_MatchDataListQuery;

    ;
    private Query<MatchData> event_MatchDataListQuery;
    private Query<MatchData> robot_MatchDataListQuery;
    private Query<MatchData> metric_MatchDataListQuery;
    private Query<MatchData> user_MatchDataListQuery;

    public MatchDataDao(DaoConfig config) {
        super(config);
    }

    public MatchDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'MATCH_DATA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ROBOT_ID' INTEGER NOT NULL ," + // 1: robotId
                "'METRIC_ID' INTEGER NOT NULL ," + // 2: metricId
                "'MATCH_ID' INTEGER NOT NULL ," + // 3: matchId
                "'EVENT_ID' INTEGER NOT NULL ," + // 4: eventId
                "'USER_ID' INTEGER NOT NULL ," + // 5: userId
                "'DATA' TEXT);"); // 6: data
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MATCH_DATA'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, MatchData entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRobotId());
        stmt.bindLong(3, entity.getMetricId());
        stmt.bindLong(4, entity.getMatchId());
        stmt.bindLong(5, entity.getEventId());
        stmt.bindLong(6, entity.getUserId());

        String data = entity.getData();
        if (data != null) {
            stmt.bindString(7, data);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public MatchData readEntity(Cursor cursor, int offset) {
        MatchData entity = new MatchData( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getLong(offset + 1), // robotId
                cursor.getLong(offset + 2), // metricId
                cursor.getLong(offset + 3), // matchId
                cursor.getLong(offset + 4), // eventId
                cursor.getLong(offset + 5), // userId
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // data
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, MatchData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRobotId(cursor.getLong(offset + 1));
        entity.setMetricId(cursor.getLong(offset + 2));
        entity.setMatchId(cursor.getLong(offset + 3));
        entity.setEventId(cursor.getLong(offset + 4));
        entity.setUserId(cursor.getLong(offset + 5));
        entity.setData(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(MatchData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(MatchData entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "matchDataList" to-many relationship of Match.
     */
    public List<MatchData> _queryMatch_MatchDataList(long matchId) {
        synchronized (this) {
            if (match_MatchDataListQuery == null) {
                QueryBuilder<MatchData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MatchId.eq(null));
                match_MatchDataListQuery = queryBuilder.build();
            }
        }
        Query<MatchData> query = match_MatchDataListQuery.forCurrentThread();
        query.setParameter(0, matchId);
        return query.list();
    }

    /**
     * Internal query to resolve the "matchDataList" to-many relationship of Event.
     */
    public List<MatchData> _queryEvent_MatchDataList(long eventId) {
        synchronized (this) {
            if (event_MatchDataListQuery == null) {
                QueryBuilder<MatchData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EventId.eq(null));
                event_MatchDataListQuery = queryBuilder.build();
            }
        }
        Query<MatchData> query = event_MatchDataListQuery.forCurrentThread();
        query.setParameter(0, eventId);
        return query.list();
    }

    /**
     * Internal query to resolve the "matchDataList" to-many relationship of Robot.
     */
    public List<MatchData> _queryRobot_MatchDataList(long robotId) {
        synchronized (this) {
            if (robot_MatchDataListQuery == null) {
                QueryBuilder<MatchData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RobotId.eq(null));
                robot_MatchDataListQuery = queryBuilder.build();
            }
        }
        Query<MatchData> query = robot_MatchDataListQuery.forCurrentThread();
        query.setParameter(0, robotId);
        return query.list();
    }

    /**
     * Internal query to resolve the "matchDataList" to-many relationship of Metric.
     */
    public List<MatchData> _queryMetric_MatchDataList(long metricId) {
        synchronized (this) {
            if (metric_MatchDataListQuery == null) {
                QueryBuilder<MatchData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MetricId.eq(null));
                metric_MatchDataListQuery = queryBuilder.build();
            }
        }
        Query<MatchData> query = metric_MatchDataListQuery.forCurrentThread();
        query.setParameter(0, metricId);
        return query.list();
    }

    /**
     * Internal query to resolve the "matchDataList" to-many relationship of User.
     */
    public List<MatchData> _queryUser_MatchDataList(long userId) {
        synchronized (this) {
            if (user_MatchDataListQuery == null) {
                QueryBuilder<MatchData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_MatchDataListQuery = queryBuilder.build();
            }
        }
        Query<MatchData> query = user_MatchDataListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    /**
     * Properties of entity MatchData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RobotId = new Property(1, long.class, "robotId", false, "ROBOT_ID");
        public final static Property MetricId = new Property(2, long.class, "metricId", false, "METRIC_ID");
        public final static Property MatchId = new Property(3, long.class, "matchId", false, "MATCH_ID");
        public final static Property EventId = new Property(4, long.class, "eventId", false, "EVENT_ID");
        public final static Property UserId = new Property(5, long.class, "userId", false, "USER_ID");
        public final static Property Data = new Property(6, String.class, "data", false, "DATA");
    }

}
