package com.team2052.frckrawler.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.team2052.frckrawler.db.PitData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PIT_DATA.
*/
public class PitDataDao extends AbstractDao<PitData, Long> {

    public static final String TABLENAME = "PIT_DATA";

    /**
     * Properties of entity PitData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RobotId = new Property(1, long.class, "robotId", false, "ROBOT_ID");
        public final static Property MetricId = new Property(2, long.class, "metricId", false, "METRIC_ID");
        public final static Property EventId = new Property(3, long.class, "eventId", false, "EVENT_ID");
        public final static Property UserId = new Property(4, long.class, "userId", false, "USER_ID");
        public final static Property Data = new Property(5, String.class, "data", false, "DATA");
    };

    private Query<PitData> event_PitDataListQuery;
    private Query<PitData> robot_PitDataListQuery;
    private Query<PitData> metric_PitDataListQuery;
    private Query<PitData> user_PitDataListQuery;

    public PitDataDao(DaoConfig config) {
        super(config);
    }
    
    public PitDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PIT_DATA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ROBOT_ID' INTEGER NOT NULL ," + // 1: robotId
                "'METRIC_ID' INTEGER NOT NULL ," + // 2: metricId
                "'EVENT_ID' INTEGER NOT NULL ," + // 3: eventId
                "'USER_ID' INTEGER NOT NULL ," + // 4: userId
                "'DATA' TEXT);"); // 5: data
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PIT_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PitData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRobotId());
        stmt.bindLong(3, entity.getMetricId());
        stmt.bindLong(4, entity.getEventId());
        stmt.bindLong(5, entity.getUserId());
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(6, data);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PitData readEntity(Cursor cursor, int offset) {
        PitData entity = new PitData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // robotId
            cursor.getLong(offset + 2), // metricId
            cursor.getLong(offset + 3), // eventId
            cursor.getLong(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // data
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PitData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRobotId(cursor.getLong(offset + 1));
        entity.setMetricId(cursor.getLong(offset + 2));
        entity.setEventId(cursor.getLong(offset + 3));
        entity.setUserId(cursor.getLong(offset + 4));
        entity.setData(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PitData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PitData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "pitDataList" to-many relationship of Event. */
    public List<PitData> _queryEvent_PitDataList(long eventId) {
        synchronized (this) {
            if (event_PitDataListQuery == null) {
                QueryBuilder<PitData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EventId.eq(null));
                event_PitDataListQuery = queryBuilder.build();
            }
        }
        Query<PitData> query = event_PitDataListQuery.forCurrentThread();
        query.setParameter(0, eventId);
        return query.list();
    }

    /** Internal query to resolve the "pitDataList" to-many relationship of Robot. */
    public List<PitData> _queryRobot_PitDataList(long robotId) {
        synchronized (this) {
            if (robot_PitDataListQuery == null) {
                QueryBuilder<PitData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RobotId.eq(null));
                robot_PitDataListQuery = queryBuilder.build();
            }
        }
        Query<PitData> query = robot_PitDataListQuery.forCurrentThread();
        query.setParameter(0, robotId);
        return query.list();
    }

    /** Internal query to resolve the "pitDataList" to-many relationship of Metric. */
    public List<PitData> _queryMetric_PitDataList(long metricId) {
        synchronized (this) {
            if (metric_PitDataListQuery == null) {
                QueryBuilder<PitData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MetricId.eq(null));
                metric_PitDataListQuery = queryBuilder.build();
            }
        }
        Query<PitData> query = metric_PitDataListQuery.forCurrentThread();
        query.setParameter(0, metricId);
        return query.list();
    }

    /** Internal query to resolve the "pitDataList" to-many relationship of User. */
    public List<PitData> _queryUser_PitDataList(long userId) {
        synchronized (this) {
            if (user_PitDataListQuery == null) {
                QueryBuilder<PitData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_PitDataListQuery = queryBuilder.build();
            }
        }
        Query<PitData> query = user_PitDataListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
