package com.team2052.frckrawler.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table MATCH_COMMENT.
 */
public class MatchCommentDao extends AbstractDao<MatchComment, Long> {

    public static final String TABLENAME = "MATCH_COMMENT";
    private DaoSession daoSession;
    ;
    private String selectDeep;


    public MatchCommentDao(DaoConfig config) {
        super(config);
    }

    public MatchCommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'MATCH_COMMENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MATCH_ID' INTEGER," + // 1: matchId
                "'COMMENT' TEXT," + // 2: comment
                "'ROBOT_ID' INTEGER," + // 3: robotId
                "'EVENT_ID' INTEGER," + // 4: eventId
                "'TEAM_ID' INTEGER);"); // 5: teamId
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MATCH_COMMENT'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, MatchComment entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long matchId = entity.getMatchId();
        if (matchId != null) {
            stmt.bindLong(2, matchId);
        }

        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(3, comment);
        }

        Long robotId = entity.getRobotId();
        if (robotId != null) {
            stmt.bindLong(4, robotId);
        }

        Long eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindLong(5, eventId);
        }

        Long teamId = entity.getTeamId();
        if (teamId != null) {
            stmt.bindLong(6, teamId);
        }
    }

    @Override
    protected void attachEntity(MatchComment entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public MatchComment readEntity(Cursor cursor, int offset) {
        MatchComment entity = new MatchComment( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // matchId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comment
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // robotId
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // eventId
                cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // teamId
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, MatchComment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMatchId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setComment(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRobotId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setEventId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setTeamId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(MatchComment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(MatchComment entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMatchDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getRobotDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getEventDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getTeamDao().getAllColumns());
            builder.append(" FROM MATCH_COMMENT T");
            builder.append(" LEFT JOIN MATCH T0 ON T.'MATCH_ID'=T0.'_id'");
            builder.append(" LEFT JOIN ROBOT T1 ON T.'ROBOT_ID'=T1.'_id'");
            builder.append(" LEFT JOIN EVENT T2 ON T.'EVENT_ID'=T2.'_id'");
            builder.append(" LEFT JOIN TEAM T3 ON T.'TEAM_ID'=T3.'NUMBER'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected MatchComment loadCurrentDeep(Cursor cursor, boolean lock) {
        MatchComment entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Match match = loadCurrentOther(daoSession.getMatchDao(), cursor, offset);
        entity.setMatch(match);
        offset += daoSession.getMatchDao().getAllColumns().length;

        Robot robot = loadCurrentOther(daoSession.getRobotDao(), cursor, offset);
        entity.setRobot(robot);
        offset += daoSession.getRobotDao().getAllColumns().length;

        Event event = loadCurrentOther(daoSession.getEventDao(), cursor, offset);
        entity.setEvent(event);
        offset += daoSession.getEventDao().getAllColumns().length;

        Team team = loadCurrentOther(daoSession.getTeamDao(), cursor, offset);
        entity.setTeam(team);

        return entity;
    }

    public MatchComment loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[]{key.toString()};
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /**
     * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
     */
    public List<MatchComment> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MatchComment> list = new ArrayList<MatchComment>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<MatchComment> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }

    /**
     * A raw-style query where you can pass any WHERE clause and arguments.
     */
    public List<MatchComment> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

    /**
     * Properties of entity MatchComment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MatchId = new Property(1, Long.class, "matchId", false, "MATCH_ID");
        public final static Property Comment = new Property(2, String.class, "comment", false, "COMMENT");
        public final static Property RobotId = new Property(3, Long.class, "robotId", false, "ROBOT_ID");
        public final static Property EventId = new Property(4, Long.class, "eventId", false, "EVENT_ID");
        public final static Property TeamId = new Property(5, Long.class, "teamId", false, "TEAM_ID");
    }

}
