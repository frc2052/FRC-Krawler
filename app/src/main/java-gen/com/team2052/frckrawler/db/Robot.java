package com.team2052.frckrawler.db;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table ROBOT.
 */
public class Robot implements java.io.Serializable {

    private Long id;
    private long teamId;
    private long gameId;
    private String data;
    private String comments;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient RobotDao myDao;

    private List<RobotEvent> robotEventList;
    private List<MatchData> matchDataList;
    private List<PitData> pitDataList;
    private List<MatchComment> matchCommentList;

    public Robot() {
    }

    public Robot(Long id) {
        this.id = id;
    }

    public Robot(Long id, long teamId, long gameId, String data, String comments) {
        this.id = id;
        this.teamId = teamId;
        this.gameId = gameId;
        this.data = data;
        this.comments = comments;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRobotDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getTeamId() {
        return teamId;
    }

    public void setTeamId(long teamId) {
        this.teamId = teamId;
    }

    public long getGameId() {
        return gameId;
    }

    public void setGameId(long gameId) {
        this.gameId = gameId;
    }

    public String getData() {
        return data;
    }

    public void setData(String data) {
        this.data = data;
    }

    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<RobotEvent> getRobotEventList() {
        if (robotEventList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RobotEventDao targetDao = daoSession.getRobotEventDao();
            List<RobotEvent> robotEventListNew = targetDao._queryRobot_RobotEventList(id);
            synchronized (this) {
                if (robotEventList == null) {
                    robotEventList = robotEventListNew;
                }
            }
        }
        return robotEventList;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetRobotEventList() {
        robotEventList = null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<MatchData> getMatchDataList() {
        if (matchDataList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MatchDataDao targetDao = daoSession.getMatchDataDao();
            List<MatchData> matchDataListNew = targetDao._queryRobot_MatchDataList(id);
            synchronized (this) {
                if (matchDataList == null) {
                    matchDataList = matchDataListNew;
                }
            }
        }
        return matchDataList;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetMatchDataList() {
        matchDataList = null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<PitData> getPitDataList() {
        if (pitDataList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PitDataDao targetDao = daoSession.getPitDataDao();
            List<PitData> pitDataListNew = targetDao._queryRobot_PitDataList(id);
            synchronized (this) {
                if (pitDataList == null) {
                    pitDataList = pitDataListNew;
                }
            }
        }
        return pitDataList;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetPitDataList() {
        pitDataList = null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<MatchComment> getMatchCommentList() {
        if (matchCommentList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MatchCommentDao targetDao = daoSession.getMatchCommentDao();
            List<MatchComment> matchCommentListNew = targetDao._queryRobot_MatchCommentList(id);
            synchronized (this) {
                if (matchCommentList == null) {
                    matchCommentList = matchCommentListNew;
                }
            }
        }
        return matchCommentList;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetMatchCommentList() {
        matchCommentList = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}
