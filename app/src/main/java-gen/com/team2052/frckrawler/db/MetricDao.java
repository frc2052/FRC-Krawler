package com.team2052.frckrawler.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table METRIC.
 */
public class MetricDao extends AbstractDao<Metric, Long>
{

    public static final String TABLENAME = "METRIC";
    private DaoSession daoSession;
    ;
    private String selectDeep;


    public MetricDao(DaoConfig config)
    {
        super(config);
    }

    public MetricDao(DaoConfig config, DaoSession daoSession)
    {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists)
    {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'METRIC' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'CATEGORY' INTEGER," + // 2: category
                "'DESCRIPTION' TEXT," + // 3: description
                "'TYPE' INTEGER," + // 4: type
                "'RANGE' TEXT," + // 5: range
                "'GAME_ID' INTEGER);"); // 6: gameId
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists)
    {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'METRIC'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Metric entity)
    {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        Integer category = entity.getCategory();
        if (category != null) {
            stmt.bindLong(3, category);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }

        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }

        String range = entity.getRange();
        if (range != null) {
            stmt.bindString(6, range);
        }

        Long gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindLong(7, gameId);
        }
    }

    @Override
    protected void attachEntity(Metric entity)
    {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset)
    {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Metric readEntity(Cursor cursor, int offset)
    {
        Metric entity = new Metric( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // category
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // type
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // range
                cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // gameId
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Metric entity, int offset)
    {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategory(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setRange(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGameId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Metric entity, long rowId)
    {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Metric entity)
    {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable()
    {
        return true;
    }

    protected String getSelectDeep()
    {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGameDao().getAllColumns());
            builder.append(" FROM METRIC T");
            builder.append(" LEFT JOIN GAME T0 ON T.'GAME_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected Metric loadCurrentDeep(Cursor cursor, boolean lock)
    {
        Metric entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Game game = loadCurrentOther(daoSession.getGameDao(), cursor, offset);
        entity.setGame(game);

        return entity;
    }

    public Metric loadDeep(Long key)
    {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[]{key.toString()};
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /**
     * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
     */
    public List<Metric> loadAllDeepFromCursor(Cursor cursor)
    {
        int count = cursor.getCount();
        List<Metric> list = new ArrayList<Metric>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<Metric> loadDeepAllAndCloseCursor(Cursor cursor)
    {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }

    /**
     * A raw-style query where you can pass any WHERE clause and arguments.
     */
    public List<Metric> queryDeep(String where, String... selectionArg)
    {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

    /**
     * Properties of entity Metric.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties
    {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Category = new Property(2, Integer.class, "category", false, "CATEGORY");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Type = new Property(4, Integer.class, "type", false, "TYPE");
        public final static Property Range = new Property(5, String.class, "range", false, "RANGE");
        public final static Property GameId = new Property(6, Long.class, "gameId", false, "GAME_ID");
    }

}
