package com.team2052.frckrawler.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table MATCH.
 */
public class MatchDao extends AbstractDao<Match, Long>
{

    public static final String TABLENAME = "MATCH";

    /**
     * Properties of entity Match.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties
    {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EventId = new Property(1, Long.class, "eventId", false, "EVENT_ID");
        public final static Property Key = new Property(2, String.class, "key", false, "KEY");
        public final static Property Number = new Property(3, Integer.class, "number", false, "NUMBER");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Blue1Id = new Property(5, Long.class, "blue1Id", false, "BLUE1_ID");
        public final static Property Blue2Id = new Property(6, Long.class, "blue2Id", false, "BLUE2_ID");
        public final static Property Blue3Id = new Property(7, Long.class, "blue3Id", false, "BLUE3_ID");
        public final static Property Red1Id = new Property(8, Long.class, "red1Id", false, "RED1_ID");
        public final static Property Red2Id = new Property(9, Long.class, "red2Id", false, "RED2_ID");
        public final static Property Red3Id = new Property(10, Long.class, "red3Id", false, "RED3_ID");
        public final static Property Redscore = new Property(11, Integer.class, "redscore", false, "REDSCORE");
        public final static Property Bluescore = new Property(12, Integer.class, "bluescore", false, "BLUESCORE");
    }

    ;

    private DaoSession daoSession;


    public MatchDao(DaoConfig config)
    {
        super(config);
    }

    public MatchDao(DaoConfig config, DaoSession daoSession)
    {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists)
    {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'MATCH' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "'EVENT_ID' INTEGER," + // 1: eventId
                "'KEY' TEXT UNIQUE ," + // 2: key
                "'NUMBER' INTEGER," + // 3: number
                "'TYPE' TEXT," + // 4: type
                "'BLUE1_ID' INTEGER," + // 5: blue1Id
                "'BLUE2_ID' INTEGER," + // 6: blue2Id
                "'BLUE3_ID' INTEGER," + // 7: blue3Id
                "'RED1_ID' INTEGER," + // 8: red1Id
                "'RED2_ID' INTEGER," + // 9: red2Id
                "'RED3_ID' INTEGER," + // 10: red3Id
                "'REDSCORE' INTEGER," + // 11: redscore
                "'BLUESCORE' INTEGER);"); // 12: bluescore
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists)
    {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MATCH'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Match entity)
    {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindLong(2, eventId);
        }

        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(3, key);
        }

        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(4, number);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }

        Long blue1Id = entity.getBlue1Id();
        if (blue1Id != null) {
            stmt.bindLong(6, blue1Id);
        }

        Long blue2Id = entity.getBlue2Id();
        if (blue2Id != null) {
            stmt.bindLong(7, blue2Id);
        }

        Long blue3Id = entity.getBlue3Id();
        if (blue3Id != null) {
            stmt.bindLong(8, blue3Id);
        }

        Long red1Id = entity.getRed1Id();
        if (red1Id != null) {
            stmt.bindLong(9, red1Id);
        }

        Long red2Id = entity.getRed2Id();
        if (red2Id != null) {
            stmt.bindLong(10, red2Id);
        }

        Long red3Id = entity.getRed3Id();
        if (red3Id != null) {
            stmt.bindLong(11, red3Id);
        }

        Integer redscore = entity.getRedscore();
        if (redscore != null) {
            stmt.bindLong(12, redscore);
        }

        Integer bluescore = entity.getBluescore();
        if (bluescore != null) {
            stmt.bindLong(13, bluescore);
        }
    }

    @Override
    protected void attachEntity(Match entity)
    {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset)
    {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Match readEntity(Cursor cursor, int offset)
    {
        Match entity = new Match( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // eventId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // key
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // number
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
                cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // blue1Id
                cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // blue2Id
                cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // blue3Id
                cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // red1Id
                cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // red2Id
                cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // red3Id
                cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // redscore
                cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // bluescore
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Match entity, int offset)
    {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEventId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNumber(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBlue1Id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setBlue2Id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setBlue3Id(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setRed1Id(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setRed2Id(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setRed3Id(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setRedscore(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setBluescore(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Match entity, long rowId)
    {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Match entity)
    {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable()
    {
        return true;
    }

    private String selectDeep;

    protected String getSelectDeep()
    {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getEventDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTeamDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getTeamDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getTeamDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getTeamDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T5", daoSession.getTeamDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T6", daoSession.getTeamDao().getAllColumns());
            builder.append(" FROM MATCH T");
            builder.append(" LEFT JOIN EVENT T0 ON T.'EVENT_ID'=T0.'_id'");
            builder.append(" LEFT JOIN TEAM T1 ON T.'BLUE1_ID'=T1.'NUMBER'");
            builder.append(" LEFT JOIN TEAM T2 ON T.'BLUE2_ID'=T2.'NUMBER'");
            builder.append(" LEFT JOIN TEAM T3 ON T.'BLUE3_ID'=T3.'NUMBER'");
            builder.append(" LEFT JOIN TEAM T4 ON T.'RED1_ID'=T4.'NUMBER'");
            builder.append(" LEFT JOIN TEAM T5 ON T.'RED2_ID'=T5.'NUMBER'");
            builder.append(" LEFT JOIN TEAM T6 ON T.'RED3_ID'=T6.'NUMBER'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected Match loadCurrentDeep(Cursor cursor, boolean lock)
    {
        Match entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Event event = loadCurrentOther(daoSession.getEventDao(), cursor, offset);
        entity.setEvent(event);
        offset += daoSession.getEventDao().getAllColumns().length;

        Team blue1 = loadCurrentOther(daoSession.getTeamDao(), cursor, offset);
        entity.setBlue1(blue1);
        offset += daoSession.getTeamDao().getAllColumns().length;

        Team blue2 = loadCurrentOther(daoSession.getTeamDao(), cursor, offset);
        entity.setBlue2(blue2);
        offset += daoSession.getTeamDao().getAllColumns().length;

        Team blue3 = loadCurrentOther(daoSession.getTeamDao(), cursor, offset);
        entity.setBlue3(blue3);
        offset += daoSession.getTeamDao().getAllColumns().length;

        Team red1 = loadCurrentOther(daoSession.getTeamDao(), cursor, offset);
        entity.setRed1(red1);
        offset += daoSession.getTeamDao().getAllColumns().length;

        Team red2 = loadCurrentOther(daoSession.getTeamDao(), cursor, offset);
        entity.setRed2(red2);
        offset += daoSession.getTeamDao().getAllColumns().length;

        Team red3 = loadCurrentOther(daoSession.getTeamDao(), cursor, offset);
        entity.setRed3(red3);

        return entity;
    }

    public Match loadDeep(Long key)
    {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[]{key.toString()};
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /**
     * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
     */
    public List<Match> loadAllDeepFromCursor(Cursor cursor)
    {
        int count = cursor.getCount();
        List<Match> list = new ArrayList<Match>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<Match> loadDeepAllAndCloseCursor(Cursor cursor)
    {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }


    /**
     * A raw-style query where you can pass any WHERE clause and arguments.
     */
    public List<Match> queryDeep(String where, String... selectionArg)
    {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

}
