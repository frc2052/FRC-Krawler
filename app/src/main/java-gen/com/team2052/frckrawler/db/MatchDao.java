package com.team2052.frckrawler.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.team2052.frckrawler.db.Match;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MATCH.
*/
public class MatchDao extends AbstractDao<Match, Long> {

    public static final String TABLENAME = "MATCH";

    /**
     * Properties of entity Match.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Number = new Property(1, Integer.class, "number", false, "NUMBER");
        public final static Property Key = new Property(2, String.class, "key", false, "KEY");
        public final static Property EventId = new Property(3, long.class, "eventId", false, "EVENT_ID");
        public final static Property Data = new Property(4, String.class, "data", false, "DATA");
    };

    private DaoSession daoSession;

    private Query<Match> event_MatchListQuery;

    public MatchDao(DaoConfig config) {
        super(config);
    }
    
    public MatchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MATCH' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "'NUMBER' INTEGER," + // 1: number
                "'KEY' TEXT UNIQUE ," + // 2: key
                "'EVENT_ID' INTEGER NOT NULL ," + // 3: eventId
                "'DATA' TEXT);"); // 4: data
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MATCH'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Match entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(2, number);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(3, key);
        }
        stmt.bindLong(4, entity.getEventId());
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(5, data);
        }
    }

    @Override
    protected void attachEntity(Match entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Match readEntity(Cursor cursor, int offset) {
        Match entity = new Match( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // number
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // key
            cursor.getLong(offset + 3), // eventId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // data
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Match entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNumber(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEventId(cursor.getLong(offset + 3));
        entity.setData(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Match entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Match entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "matchList" to-many relationship of Event. */
    public List<Match> _queryEvent_MatchList(long eventId) {
        synchronized (this) {
            if (event_MatchListQuery == null) {
                QueryBuilder<Match> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EventId.eq(null));
                event_MatchListQuery = queryBuilder.build();
            }
        }
        Query<Match> query = event_MatchListQuery.forCurrentThread();
        query.setParameter(0, eventId);
        return query.list();
    }

}
